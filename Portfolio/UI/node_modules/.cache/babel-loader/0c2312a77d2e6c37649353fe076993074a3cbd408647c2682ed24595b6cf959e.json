{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Arsenije\\\\source\\\\repos\\\\CloudProjekat\\\\Portfolio\\\\UI\\\\src\\\\Components\\\\PortfolioPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../styles/PortfolioPage.css';\nimport Header from './Header';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PortfolioPage = () => {\n  _s();\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem('user')));\n  const [cryptos, setCryptos] = useState([]);\n  const [cryptoSymbol, setCryptoSymbol] = useState('');\n  const [cryptoName, setCryptoName] = useState('');\n  const [cryptoPrice, setCryptoPrice] = useState(0);\n  const [cryptoAmount, setCryptoAmount] = useState(0);\n  const [cryptoOptions, setCryptoOptions] = useState([]);\n  const [transactionHistory, setTransactionHistory] = useState([]);\n  const [totalValue, setTotalValue] = useState(0);\n  const [profitLossData, setProfitLossData] = useState({});\n  const symbolToName = {\n    BTC: 'Bitcoin',\n    ETH: 'Ethereum',\n    USDT: 'Tether',\n    BNB: 'Binancecoin',\n    SOL: 'Solana',\n    STETH: 'Staked-ether',\n    USDC: 'Usd-coin',\n    XRP: 'Ripple',\n    DOGE: 'Dogecoin',\n    TON: 'Ton-crystal',\n    ADA: 'Cardano',\n    AVAX: 'Avalanche-2',\n    SHIB: 'Shiba-inu',\n    WBTC: 'Wrapped-bitcoin',\n    TRX: 'Tron',\n    DOT: 'Polkadot',\n    BCH: 'Bitcoin-cash',\n    LINK: 'Chainlink',\n    NEAR: 'Near',\n    UNI: 'Uniswap'\n  };\n  useEffect(() => {\n    if (cryptoSymbol) {\n      setCryptoName(symbolToName[cryptoSymbol.toUpperCase()] || '');\n    }\n  }, [cryptoSymbol]);\n  useEffect(() => {\n    if (user) {\n      getAllCryptos(user.email);\n      getTopCryptoSymbols();\n      getTransactionHistory(user.email);\n    }\n  }, [user]);\n  useEffect(() => {\n    transactionHistory.sort((a, b) => new Date(b.TransactionDate) - new Date(a.TransactionDate));\n  }, [transactionHistory]);\n  useEffect(() => {\n    if (cryptos.length > 0) {\n      fetchCryptoPrices();\n    }\n  }, [cryptos]);\n  const getAllCryptos = async userEmail => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/crypto?userEmail=${userEmail}`);\n      setCryptos(response.data);\n    } catch (error) {\n      console.error('Error fetching cryptos:', error);\n    }\n  };\n  const getTransactionHistory = async userEmail => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/crypto/transactions?userEmail=${userEmail}`);\n      setTransactionHistory(response.data);\n    } catch (error) {\n      console.error('Error fetching transaction history:', error);\n    }\n  };\n  const getTopCryptoSymbols = async () => {\n    try {\n      const response = await axios.get('https://api.coingecko.com/api/v3/coins/markets', {\n        params: {\n          vs_currency: 'usd',\n          per_page: 20,\n          page: 1,\n          order: 'market_cap_desc',\n          sparkline: false\n        }\n      });\n      const symbols = response.data.map(crypto => crypto.symbol.toUpperCase());\n      setCryptoOptions(symbols);\n    } catch (error) {\n      console.error('Error fetching top crypto symbols:', error);\n    }\n  };\n  const handleDeleteCrypto = async symbol => {\n    try {\n      await axios.delete(`http://localhost:5000/api/crypto`, {\n        params: {\n          userEmail: user.email,\n          symbol: symbol.toUpperCase()\n        }\n      });\n      getAllCryptos(user.email);\n      getTransactionHistory(user.email);\n    } catch (error) {\n      console.error('Error deleting crypto:', error);\n    }\n  };\n  const handleSellCrypto = async () => {\n    try {\n      const existingCrypto = cryptos.find(c => c.Symbol === cryptoSymbol.toUpperCase());\n      if (existingCrypto) {\n        await axios.post(`http://localhost:5000/api/crypto/sell`, {\n          userEmail: user.email,\n          symbol: cryptoSymbol.toUpperCase(),\n          amount: cryptoAmount,\n          price: cryptoPrice,\n          transactionDate: new Date() // Add transaction date\n        });\n        const updatedHistory = transactionHistory.map(transaction => {\n          if (transaction.CryptoSymbol === cryptoSymbol.toUpperCase() && transaction.IsPurchase) {\n            return {\n              ...transaction,\n              Price: cryptoPrice\n            };\n          }\n          return transaction;\n        });\n        setTransactionHistory(updatedHistory);\n      } else {\n        console.error('Kriptovaluta koju pokušavate da prodate nije pronađena.');\n      }\n      getAllCryptos(user.email);\n      getTransactionHistory(user.email);\n    } catch (error) {\n      console.error('Greška prilikom prodaje kriptovalute:', error);\n    }\n  };\n  const handleAddOrBuyCrypto = async () => {\n    try {\n      const existingCrypto = cryptos.find(c => c.Symbol === cryptoSymbol.toUpperCase());\n      if (existingCrypto) {\n        await axios.post(`http://localhost:5000/api/crypto/buy`, {\n          userEmail: user.email,\n          symbol: cryptoSymbol.toUpperCase(),\n          amount: cryptoAmount,\n          price: cryptoPrice,\n          transactionDate: new Date() // Add transaction date\n        });\n        const updatedHistory = transactionHistory.map(transaction => {\n          if (transaction.CryptoSymbol === cryptoSymbol.toUpperCase() && !transaction.IsPurchase) {\n            return {\n              ...transaction,\n              Price: cryptoPrice\n            };\n          }\n          return transaction;\n        });\n        setTransactionHistory(updatedHistory);\n      } else {\n        await axios.post(`http://localhost:5000/api/crypto`, {\n          userEmail: user.email,\n          name: cryptoName,\n          symbol: cryptoSymbol.toUpperCase(),\n          amount: cryptoAmount,\n          currentPrice: cryptoPrice,\n          initialPrice: cryptoPrice,\n          transactionDate: new Date() // Add transaction date\n        });\n      }\n      getAllCryptos(user.email);\n      getTransactionHistory(user.email);\n    } catch (error) {\n      console.error('Error adding or buying crypto:', error);\n    }\n  };\n  const fetchCryptoPrices = async () => {\n    try {\n      const response = await axios.get('https://api.coinbase.com/v2/exchange-rates?currency=usd');\n      const rates = response.data.data.rates;\n      let total = 0;\n      const profitLoss = {};\n      cryptos.forEach(crypto => {\n        const rate = rates[crypto.Symbol.toUpperCase()];\n        if (rate) {\n          const cryptoPrice = 1 / rate;\n          total += cryptoPrice * crypto.Amount;\n          if (crypto.CurrentPrice) {\n            const profitLossPercentage = (cryptoPrice - crypto.CurrentPrice) / crypto.CurrentPrice * 100;\n            profitLoss[crypto.Symbol.toUpperCase()] = profitLossPercentage.toFixed(2);\n            console.log('crypto.CurrentPrice: ', crypto.CurrentPrice);\n            console.log('profitLossPercentage: ', profitLossPercentage);\n          } else {\n            profitLoss[crypto.Symbol.toUpperCase()] = 'N/A';\n          }\n        } else {\n          console.error(`Error fetching rate for ${crypto.Symbol.toUpperCase()}: Rate not found in response`);\n          profitLoss[crypto.Symbol.toUpperCase()] = 'N/A';\n        }\n      });\n      setTotalValue(total);\n      setProfitLossData(profitLoss);\n    } catch (error) {\n      console.error('Error fetching crypto prices:', error);\n    }\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('user');\n    setUser(null);\n  };\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Niste ulogovani.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"portfolio-container container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"crypto-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"mt-4\",\n        children: \"Va\\u0161e kriptovalute:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group\",\n        children: cryptos.map(crypto => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"crypto-info\",\n            children: [crypto.Name, \" (\", crypto.Symbol.toUpperCase(), \") - \", crypto.Amount.toFixed(3), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: profitLossData[crypto.Symbol.toUpperCase()] < 0 ? 'red' : 'green'\n              },\n              children: profitLossData[crypto.Symbol.toUpperCase()] !== 'N/A' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [\" (\", profitLossData[crypto.Symbol.toUpperCase()], \"%) \"]\n              }, void 0, true) : ' (N/A)'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-danger ml-2\",\n            onClick: () => handleDeleteCrypto(crypto.Symbol),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 29\n          }, this)]\n        }, crypto.RowKey, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"mt-4\",\n        children: [\"Ukupna vrednost portfolia: $\", totalValue.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container mt-4\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"crypto-form card p-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Unesite informacije o kriptovaluti:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Symbol:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: cryptoSymbol,\n            onChange: e => setCryptoSymbol(e.target.value.toUpperCase()),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Izaberite simbol\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 29\n            }, this), cryptoOptions.map(symbol => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: symbol.toUpperCase(),\n              children: symbol.toUpperCase()\n            }, symbol, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Ime:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            type: \"text\",\n            value: cryptoName,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Cena:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            type: \"number\",\n            value: cryptoPrice,\n            onChange: e => setCryptoPrice(parseFloat(e.target.value))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Koli\\u010Dina:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            type: \"number\",\n            value: cryptoAmount,\n            onChange: e => setCryptoAmount(parseFloat(e.target.value))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary mr-2 buy-btn\",\n          type: \"button\",\n          onClick: handleAddOrBuyCrypto,\n          children: \"Buy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary sell-btn\",\n          type: \"button\",\n          onClick: handleSellCrypto,\n          children: \"Sell\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transaction-history mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Istorija transakcija:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Simbol\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Datum\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Koli\\u010Dina\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cena\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Tip transakcije\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: transactionHistory.map(transaction => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: transaction.CryptoSymbol\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(transaction.TransactionDate).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: transaction.Amount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: transaction.Price\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: transaction.IsPurchase ? 'Kupovina' : 'Prodaja'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 33\n            }, this)]\n          }, transaction.RowKey, true, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 9\n  }, this);\n};\n_s(PortfolioPage, \"khTlPEcbuvuHBThlPRAEe+7wg/I=\");\n_c = PortfolioPage;\nexport default PortfolioPage;\nvar _c;\n$RefreshReg$(_c, \"PortfolioPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","Header","jsxDEV","_jsxDEV","Fragment","_Fragment","PortfolioPage","_s","user","setUser","JSON","parse","localStorage","getItem","cryptos","setCryptos","cryptoSymbol","setCryptoSymbol","cryptoName","setCryptoName","cryptoPrice","setCryptoPrice","cryptoAmount","setCryptoAmount","cryptoOptions","setCryptoOptions","transactionHistory","setTransactionHistory","totalValue","setTotalValue","profitLossData","setProfitLossData","symbolToName","BTC","ETH","USDT","BNB","SOL","STETH","USDC","XRP","DOGE","TON","ADA","AVAX","SHIB","WBTC","TRX","DOT","BCH","LINK","NEAR","UNI","toUpperCase","getAllCryptos","email","getTopCryptoSymbols","getTransactionHistory","sort","a","b","Date","TransactionDate","length","fetchCryptoPrices","userEmail","response","get","data","error","console","params","vs_currency","per_page","page","order","sparkline","symbols","map","crypto","symbol","handleDeleteCrypto","delete","handleSellCrypto","existingCrypto","find","c","Symbol","post","amount","price","transactionDate","updatedHistory","transaction","CryptoSymbol","IsPurchase","Price","handleAddOrBuyCrypto","name","currentPrice","initialPrice","rates","total","profitLoss","forEach","rate","Amount","CurrentPrice","profitLossPercentage","toFixed","log","handleLogout","removeItem","children","fileName","_jsxFileName","lineNumber","columnNumber","className","Name","style","color","onClick","RowKey","value","onChange","e","target","type","readOnly","parseFloat","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Arsenije/source/repos/CloudProjekat/Portfolio/UI/src/Components/PortfolioPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport '../styles/PortfolioPage.css';\r\nimport Header from './Header';\r\n\r\nconst PortfolioPage = () => {\r\n    const [user, setUser] = useState(JSON.parse(localStorage.getItem('user')));\r\n    const [cryptos, setCryptos] = useState([]);\r\n    const [cryptoSymbol, setCryptoSymbol] = useState('');\r\n    const [cryptoName, setCryptoName] = useState('');\r\n    const [cryptoPrice, setCryptoPrice] = useState(0);\r\n    const [cryptoAmount, setCryptoAmount] = useState(0);\r\n    const [cryptoOptions, setCryptoOptions] = useState([]);\r\n    const [transactionHistory, setTransactionHistory] = useState([]);\r\n    const [totalValue, setTotalValue] = useState(0);\r\n    const [profitLossData, setProfitLossData] = useState({});\r\n\r\n    const symbolToName = {\r\n        BTC: 'Bitcoin',\r\n        ETH: 'Ethereum',\r\n        USDT: 'Tether',\r\n        BNB: 'Binancecoin',\r\n        SOL: 'Solana',\r\n        STETH: 'Staked-ether',\r\n        USDC: 'Usd-coin',\r\n        XRP: 'Ripple',\r\n        DOGE: 'Dogecoin',\r\n        TON: 'Ton-crystal',\r\n        ADA: 'Cardano',\r\n        AVAX: 'Avalanche-2',\r\n        SHIB: 'Shiba-inu',\r\n        WBTC: 'Wrapped-bitcoin',\r\n        TRX: 'Tron',\r\n        DOT: 'Polkadot',\r\n        BCH: 'Bitcoin-cash',\r\n        LINK: 'Chainlink',\r\n        NEAR: 'Near',\r\n        UNI: 'Uniswap'\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (cryptoSymbol) {\r\n            setCryptoName(symbolToName[cryptoSymbol.toUpperCase()] || '');\r\n        }\r\n    }, [cryptoSymbol]);\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            getAllCryptos(user.email);\r\n            getTopCryptoSymbols();\r\n            getTransactionHistory(user.email);\r\n        }\r\n    }, [user]);\r\n\r\n    useEffect(() => {\r\n        transactionHistory.sort((a, b) => new Date(b.TransactionDate) - new Date(a.TransactionDate));\r\n    }, [transactionHistory]);\r\n\r\n    useEffect(() => {\r\n        if (cryptos.length > 0) {\r\n            fetchCryptoPrices();\r\n        }\r\n    }, [cryptos]);\r\n\r\n    const getAllCryptos = async (userEmail) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/api/crypto?userEmail=${userEmail}`);\r\n            setCryptos(response.data);\r\n        } catch (error) {\r\n            console.error('Error fetching cryptos:', error);\r\n        }\r\n    };\r\n\r\n    const getTransactionHistory = async (userEmail) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/api/crypto/transactions?userEmail=${userEmail}`);\r\n            setTransactionHistory(response.data);\r\n        } catch (error) {\r\n            console.error('Error fetching transaction history:', error);\r\n        }\r\n    };\r\n\r\n    const getTopCryptoSymbols = async () => {\r\n        try {\r\n            const response = await axios.get('https://api.coingecko.com/api/v3/coins/markets', {\r\n                params: {\r\n                    vs_currency: 'usd',\r\n                    per_page: 20,\r\n                    page: 1,\r\n                    order: 'market_cap_desc',\r\n                    sparkline: false\r\n                }\r\n            });\r\n            const symbols = response.data.map(crypto => crypto.symbol.toUpperCase());\r\n            setCryptoOptions(symbols);\r\n        } catch (error) {\r\n            console.error('Error fetching top crypto symbols:', error);\r\n        }\r\n    };\r\n\r\n    const handleDeleteCrypto = async (symbol) => {\r\n        try {\r\n            await axios.delete(`http://localhost:5000/api/crypto`, {\r\n                params: {\r\n                    userEmail: user.email,\r\n                    symbol: symbol.toUpperCase()\r\n                }\r\n            });\r\n            getAllCryptos(user.email);\r\n            getTransactionHistory(user.email);\r\n        } catch (error) {\r\n            console.error('Error deleting crypto:', error);\r\n        }\r\n    };\r\n    \r\n\r\n    const handleSellCrypto = async () => {\r\n        try {\r\n            const existingCrypto = cryptos.find(c => c.Symbol === cryptoSymbol.toUpperCase());\r\n    \r\n            if (existingCrypto) {\r\n                await axios.post(`http://localhost:5000/api/crypto/sell`, {\r\n                    userEmail: user.email,\r\n                    symbol: cryptoSymbol.toUpperCase(),\r\n                    amount: cryptoAmount,\r\n                    price: cryptoPrice,\r\n                    transactionDate: new Date() // Add transaction date\r\n                });\r\n    \r\n                const updatedHistory = transactionHistory.map(transaction => {\r\n                    if (transaction.CryptoSymbol === cryptoSymbol.toUpperCase() && transaction.IsPurchase) {\r\n                        return { ...transaction, Price: cryptoPrice };\r\n                    }\r\n                    return transaction;\r\n                });\r\n                setTransactionHistory(updatedHistory);\r\n            } else {\r\n                console.error('Kriptovaluta koju pokušavate da prodate nije pronađena.');\r\n            }\r\n            getAllCryptos(user.email);\r\n            getTransactionHistory(user.email);\r\n        } catch (error) {\r\n            console.error('Greška prilikom prodaje kriptovalute:', error);\r\n        }\r\n    };\r\n    \r\n    const handleAddOrBuyCrypto = async () => {\r\n        try {\r\n            const existingCrypto = cryptos.find(c => c.Symbol === cryptoSymbol.toUpperCase());\r\n    \r\n            if (existingCrypto) {\r\n                await axios.post(`http://localhost:5000/api/crypto/buy`, {\r\n                    userEmail: user.email,\r\n                    symbol: cryptoSymbol.toUpperCase(),\r\n                    amount: cryptoAmount,\r\n                    price: cryptoPrice,\r\n                    transactionDate: new Date() // Add transaction date\r\n                });\r\n    \r\n                const updatedHistory = transactionHistory.map(transaction => {\r\n                    if (transaction.CryptoSymbol === cryptoSymbol.toUpperCase() && !transaction.IsPurchase) {\r\n                        return { ...transaction, Price: cryptoPrice };\r\n                    }\r\n                    return transaction;\r\n                });\r\n                setTransactionHistory(updatedHistory);\r\n            } else {\r\n                await axios.post(`http://localhost:5000/api/crypto`, {\r\n                    userEmail: user.email,\r\n                    name: cryptoName,\r\n                    symbol: cryptoSymbol.toUpperCase(),\r\n                    amount: cryptoAmount,\r\n                    currentPrice: cryptoPrice,\r\n                    initialPrice: cryptoPrice,\r\n                    transactionDate: new Date() // Add transaction date\r\n                });\r\n            }\r\n            getAllCryptos(user.email);\r\n            getTransactionHistory(user.email);\r\n        } catch (error) {\r\n            console.error('Error adding or buying crypto:', error);\r\n        }\r\n    };\r\n    \r\n\r\n    const fetchCryptoPrices = async () => {\r\n        try {\r\n            const response = await axios.get('https://api.coinbase.com/v2/exchange-rates?currency=usd');\r\n            const rates = response.data.data.rates;\r\n\r\n            let total = 0;\r\n            const profitLoss = {};\r\n\r\n            cryptos.forEach(crypto => {\r\n                const rate = rates[crypto.Symbol.toUpperCase()];\r\n                if (rate) {\r\n                    const cryptoPrice = 1 / rate;\r\n                    total += cryptoPrice * crypto.Amount;\r\n\r\n                    if (crypto.CurrentPrice) {\r\n                        const profitLossPercentage = ((cryptoPrice - crypto.CurrentPrice) / crypto.CurrentPrice)* 100;\r\n                        profitLoss[crypto.Symbol.toUpperCase()] = profitLossPercentage.toFixed(2);\r\n                        console.log('crypto.CurrentPrice: ', crypto.CurrentPrice);\r\n                        console.log('profitLossPercentage: ', profitLossPercentage);\r\n                    } else {\r\n                        profitLoss[crypto.Symbol.toUpperCase()] = 'N/A';\r\n                    }\r\n                } else {\r\n                    console.error(`Error fetching rate for ${crypto.Symbol.toUpperCase()}: Rate not found in response`);\r\n                    profitLoss[crypto.Symbol.toUpperCase()] = 'N/A';\r\n                }\r\n            });\r\n\r\n            setTotalValue(total);\r\n            setProfitLossData(profitLoss);\r\n        } catch (error) {\r\n            console.error('Error fetching crypto prices:', error);\r\n        }\r\n    };\r\n\r\n    const handleLogout = () => {\r\n        localStorage.removeItem('user');\r\n        setUser(null);\r\n    };\r\n\r\n    if (!user) {\r\n        return <p>Niste ulogovani.</p>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"portfolio-container container\">\r\n            <Header />\r\n            <div className=\"crypto-container\">\r\n                <h3 className=\"mt-4\">Vaše kriptovalute:</h3>\r\n                <ul className=\"list-group\">\r\n                    {cryptos.map(crypto => (\r\n                        <li className=\"list-group-item\" key={crypto.RowKey}>\r\n                            <span className=\"crypto-info\">\r\n                                {crypto.Name} ({crypto.Symbol.toUpperCase()}) - {crypto.Amount.toFixed(3)}\r\n                                <span style={{ color: profitLossData[crypto.Symbol.toUpperCase()] < 0 ? 'red' : 'green' }}>\r\n                                    {profitLossData[crypto.Symbol.toUpperCase()] !== 'N/A' ? (\r\n                                        <> ({profitLossData[crypto.Symbol.toUpperCase()]}%) </>\r\n                                    ) : (\r\n                                        ' (N/A)'\r\n                                    )}\r\n                                </span>\r\n                            </span>\r\n                            <button className=\"btn btn-danger ml-2\" onClick={() => handleDeleteCrypto(crypto.Symbol)}>X</button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n\r\n                <h4 className=\"mt-4\">Ukupna vrednost portfolia: ${totalValue.toFixed(2)}</h4>\r\n            </div>\r\n            <div className=\"form-container mt-4\">\r\n                <form className=\"crypto-form card p-4\">\r\n                    <h3>Unesite informacije o kriptovaluti:</h3>\r\n                    <div className=\"form-group\">\r\n                        <label>Symbol:</label>\r\n                        <select className=\"form-control\" value={cryptoSymbol} onChange={e => setCryptoSymbol(e.target.value.toUpperCase())}>\r\n                            <option value=\"\">Izaberite simbol</option>\r\n                            {cryptoOptions.map(symbol => (\r\n                                <option key={symbol} value={symbol.toUpperCase()}>{symbol.toUpperCase()}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Ime:</label>\r\n                        <input className=\"form-control\" type=\"text\" value={cryptoName} readOnly />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Cena:</label>\r\n                        <input className=\"form-control\" type=\"number\" value={cryptoPrice} onChange={e => setCryptoPrice(parseFloat(e.target.value))} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Količina:</label>\r\n                        <input className=\"form-control\" type=\"number\" value={cryptoAmount} onChange={e => setCryptoAmount(parseFloat(e.target.value))} />\r\n                    </div>\r\n                    <button className=\"btn btn-primary mr-2 buy-btn\" type=\"button\" onClick={handleAddOrBuyCrypto}>Buy</button>\r\n                    <button className=\"btn btn-secondary sell-btn\" type=\"button\" onClick={handleSellCrypto}>Sell</button>\r\n                </form>\r\n            </div>\r\n            <div className=\"transaction-history mt-5\">\r\n                <h3>Istorija transakcija:</h3>\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Simbol</th>\r\n                            <th>Datum</th>\r\n                            <th>Količina</th>\r\n                            <th>Cena</th>\r\n                            <th>Tip transakcije</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {transactionHistory.map(transaction => (\r\n                            <tr key={transaction.RowKey}>\r\n                                <td>{transaction.CryptoSymbol}</td>\r\n                                <td>{new Date(transaction.TransactionDate).toLocaleString()}</td>\r\n                                <td>{transaction.Amount}</td>\r\n                                <td>{transaction.Price}</td>\r\n                                <td>{transaction.IsPurchase ? 'Kupovina' : 'Prodaja'}</td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PortfolioPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}