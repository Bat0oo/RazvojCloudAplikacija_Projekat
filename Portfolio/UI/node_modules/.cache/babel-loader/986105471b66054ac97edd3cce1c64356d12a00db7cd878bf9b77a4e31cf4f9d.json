{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Arsenije\\\\source\\\\repos\\\\CloudProjekat\\\\Portfolio\\\\UI\\\\src\\\\Components\\\\Alarm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Header from './Header';\nimport '../styles/Alarm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlarmPage = () => {\n  _s();\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem('user')));\n  const [cryptos, setCryptos] = useState([]);\n  const [cryptoSymbol, setCryptoSymbol] = useState('');\n  const [cryptoName, setCryptoName] = useState('');\n  const [cryptoPrice, setCryptoPrice] = useState(0);\n  const [alarmPrice, setAlarmPrice] = useState(0);\n  const [alarmCondition, setAlarmCondition] = useState('above');\n  const [cryptoOptions, setCryptoOptions] = useState([]);\n  const [transactionHistory, setTransactionHistory] = useState([]);\n  const [alarms, setAlarms] = useState([]);\n  const [currentValues, setCurrentValues] = useState({});\n  const symbolToName = {\n    BTC: 'Bitcoin',\n    ETH: 'Ethereum',\n    USDT: 'Tether',\n    BNB: 'Binancecoin',\n    SOL: 'Solana',\n    STETH: 'Staked-ether',\n    USDC: 'Usd-coin',\n    XRP: 'Ripple',\n    DOGE: 'Dogecoin',\n    TON: 'Ton-crystal',\n    ADA: 'Cardano',\n    AVAX: 'Avalanche-2',\n    SHIB: 'Shiba-inu',\n    WBTC: 'Wrapped-bitcoin',\n    TRX: 'Tron',\n    DOT: 'Polkadot',\n    BCH: 'Bitcoin-cash',\n    LINK: 'Chainlink',\n    NEAR: 'Near',\n    UNI: 'Uniswap'\n  };\n  useEffect(() => {\n    if (user) {\n      getAllCryptos(user.email);\n      getTopCryptoSymbols();\n      getTransactionHistory(user.email);\n      getAllAlarms(user.email);\n      fetchAlarmPrices();\n      fetchCurrentPriceForAllCryptos();\n    }\n  }, [user]);\n  const getAllCryptos = async userEmail => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/crypto?userEmail=${userEmail}`);\n      console.log(\"Cryptos after refresh:\", response.data);\n      setCryptos(response.data);\n    } catch (error) {\n      console.error('Error fetching cryptos:', error);\n    }\n  };\n  const getTransactionHistory = async userEmail => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/crypto/transactions?userEmail=${userEmail}`);\n      setTransactionHistory(response.data);\n    } catch (error) {\n      console.error('Error fetching transaction history:', error);\n    }\n  };\n  const getTopCryptoSymbols = async () => {\n    try {\n      const response = await axios.get('http://localhost:8080/https://api.coingecko.com/api/v3/coins/markets', {\n        params: {\n          vs_currency: 'usd',\n          per_page: 20,\n          page: 1,\n          order: 'market_cap_desc',\n          sparkline: false\n        }\n      });\n      const symbols = response.data.map(crypto => crypto.symbol.toUpperCase());\n      setCryptoOptions(symbols);\n    } catch (error) {\n      console.error('Error fetching top crypto symbols:', error);\n    }\n  };\n  const fetchCurrentPrice = async symbol => {\n    try {\n      const response = await axios.get(`https://api.coinbase.com/v2/prices/${symbol.toUpperCase()}-USD/spot`);\n      return response.data.data.amount;\n    } catch (error) {\n      console.error('Error fetching current price:', error);\n      return null;\n    }\n  };\n  const fetchAlarmPrices = async () => {\n    try {\n      const promises = alarms.map(async alarm => {\n        const currentPricePromise = fetchCurrentPrice(alarm.CryptoSymbol.toLowerCase());\n        return currentPricePromise.then(currentPrice => {\n          console.log(`Alarm: ${alarm.CryptoSymbol}, Current price: ${currentPrice}`);\n          if (currentPrice !== null) {\n            setCurrentValues(prevValues => ({\n              ...prevValues,\n              [alarm.CryptoSymbol.toUpperCase()]: currentPrice\n            }));\n          }\n          return {\n            ...alarm,\n            currentPrice: currentPrice\n          };\n        });\n      });\n      const updatedAlarms = await Promise.all(promises);\n      setAlarms(updatedAlarms);\n    } catch (error) {\n      console.error('Error fetching alarm prices:', error);\n    }\n  };\n  const handleAddAlarm = async () => {\n    try {\n      const alarmId = `${cryptoSymbol}-${Date.now()}`;\n      const newAlarm = {\n        userEmail: user.email,\n        alarmId: alarmId,\n        cryptoSymbol: cryptoSymbol.toUpperCase(),\n        targetPrice: alarmPrice,\n        aboveorbelow: alarmCondition,\n        isTriggered: false\n      };\n      await axios.post('http://localhost:5000/api/alarm', newAlarm);\n      getAllAlarms(user.email);\n    } catch (error) {\n      console.error('Error adding alarm:', error);\n    }\n  };\n  const getAllAlarms = async userEmail => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/alarm?userEmail=${userEmail}`);\n      setAlarms(response.data);\n    } catch (error) {\n      console.error('Error fetching alarms:', error);\n    }\n  };\n  const fetchCurrentPriceForAllCryptos = async () => {\n    try {\n      if (cryptos.length === 0) {\n        console.log(\"Nema dostupnih kriptovaluta.\");\n        return;\n      }\n      const symbols = cryptos.map(crypto => crypto.Symbol);\n      const prices = await Promise.all(symbols.map(async symbol => {\n        const currentPrice = await fetchCurrentPrice(symbol);\n        return {\n          symbol,\n          currentPrice\n        };\n      }));\n      console.log(\"Trenutne cene za sve kriptovalute:\", prices);\n    } catch (error) {\n      console.error('Error fetching current prices for all cryptos:', error);\n    }\n  };\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Niste ulogovani.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"alarm-container container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container mt-4\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"alarm-form card p-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Postavite alarm za kriptovalutu:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Symbol:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: cryptoSymbol,\n            onChange: e => setCryptoSymbol(e.target.value.toUpperCase()),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Izaberite simbol\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 29\n            }, this), cryptoOptions.map(symbol => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: symbol.toUpperCase(),\n              children: symbol.toUpperCase()\n            }, symbol, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Ciljana cena:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            type: \"number\",\n            value: alarmPrice,\n            onChange: e => setAlarmPrice(parseFloat(e.target.value))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Uslov:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: alarmCondition,\n            onChange: e => setAlarmCondition(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"above\",\n              children: \"Iznad\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"below\",\n              children: \"Ispod\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary mt-3\",\n          type: \"button\",\n          onClick: handleAddAlarm,\n          children: \"Postavi alarm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alarm-list mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Aktivni alarmi:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CryptoSymbol\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Ciljana cena\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Trenutna cena\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Uslov\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: alarms.map((alarm, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: alarm.CryptoSymbol\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [alarm.TargetPrice, \" USD\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: currentValues[alarm.CryptoSymbol.toUpperCase()] !== undefined ? currentValues[alarm.CryptoSymbol.toUpperCase()] : 'Loading...'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: alarm.IsAbove ? 'Iznad' : 'Ispod'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 9\n  }, this);\n};\n_s(AlarmPage, \"zK4MD3Q42/80K3D0io3sJ1BlX5g=\");\n_c = AlarmPage;\nexport default AlarmPage;\nvar _c;\n$RefreshReg$(_c, \"AlarmPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","Header","jsxDEV","_jsxDEV","AlarmPage","_s","user","setUser","JSON","parse","localStorage","getItem","cryptos","setCryptos","cryptoSymbol","setCryptoSymbol","cryptoName","setCryptoName","cryptoPrice","setCryptoPrice","alarmPrice","setAlarmPrice","alarmCondition","setAlarmCondition","cryptoOptions","setCryptoOptions","transactionHistory","setTransactionHistory","alarms","setAlarms","currentValues","setCurrentValues","symbolToName","BTC","ETH","USDT","BNB","SOL","STETH","USDC","XRP","DOGE","TON","ADA","AVAX","SHIB","WBTC","TRX","DOT","BCH","LINK","NEAR","UNI","getAllCryptos","email","getTopCryptoSymbols","getTransactionHistory","getAllAlarms","fetchAlarmPrices","fetchCurrentPriceForAllCryptos","userEmail","response","get","console","log","data","error","params","vs_currency","per_page","page","order","sparkline","symbols","map","crypto","symbol","toUpperCase","fetchCurrentPrice","amount","promises","alarm","currentPricePromise","CryptoSymbol","toLowerCase","then","currentPrice","prevValues","updatedAlarms","Promise","all","handleAddAlarm","alarmId","Date","now","newAlarm","targetPrice","aboveorbelow","isTriggered","post","length","Symbol","prices","children","fileName","_jsxFileName","lineNumber","columnNumber","className","value","onChange","e","target","type","parseFloat","onClick","index","TargetPrice","undefined","IsAbove","_c","$RefreshReg$"],"sources":["C:/Users/Arsenije/source/repos/CloudProjekat/Portfolio/UI/src/Components/Alarm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Header from './Header';\r\nimport '../styles/Alarm.css';\r\n\r\nconst AlarmPage = () => {\r\n    const [user, setUser] = useState(JSON.parse(localStorage.getItem('user')));\r\n    const [cryptos, setCryptos] = useState([]);\r\n    const [cryptoSymbol, setCryptoSymbol] = useState('');\r\n    const [cryptoName, setCryptoName] = useState('');\r\n    const [cryptoPrice, setCryptoPrice] = useState(0);\r\n    const [alarmPrice, setAlarmPrice] = useState(0);\r\n    const [alarmCondition, setAlarmCondition] = useState('above');\r\n    const [cryptoOptions, setCryptoOptions] = useState([]);\r\n    const [transactionHistory, setTransactionHistory] = useState([]);\r\n    const [alarms, setAlarms] = useState([]);\r\n    const [currentValues, setCurrentValues] = useState({});\r\n\r\n    const symbolToName = {\r\n        BTC: 'Bitcoin',\r\n        ETH: 'Ethereum',\r\n        USDT: 'Tether',\r\n        BNB: 'Binancecoin',\r\n        SOL: 'Solana',\r\n        STETH: 'Staked-ether',\r\n        USDC: 'Usd-coin',\r\n        XRP: 'Ripple',\r\n        DOGE: 'Dogecoin',\r\n        TON: 'Ton-crystal',\r\n        ADA: 'Cardano',\r\n        AVAX: 'Avalanche-2',\r\n        SHIB: 'Shiba-inu',\r\n        WBTC: 'Wrapped-bitcoin',\r\n        TRX: 'Tron',\r\n        DOT: 'Polkadot',\r\n        BCH: 'Bitcoin-cash',\r\n        LINK: 'Chainlink',\r\n        NEAR: 'Near',\r\n        UNI: 'Uniswap'\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            getAllCryptos(user.email);\r\n            getTopCryptoSymbols();\r\n            getTransactionHistory(user.email);\r\n            getAllAlarms(user.email);\r\n            fetchAlarmPrices();\r\n            fetchCurrentPriceForAllCryptos();\r\n        }\r\n    }, [user]);\r\n\r\n    const getAllCryptos = async (userEmail) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/api/crypto?userEmail=${userEmail}`);\r\n            console.log(\"Cryptos after refresh:\", response.data);\r\n            setCryptos(response.data);\r\n        } catch (error) {\r\n            console.error('Error fetching cryptos:', error);\r\n        }\r\n    };\r\n    \r\n\r\n    const getTransactionHistory = async (userEmail) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/api/crypto/transactions?userEmail=${userEmail}`);\r\n            setTransactionHistory(response.data);\r\n        } catch (error) {\r\n            console.error('Error fetching transaction history:', error);\r\n        }\r\n    };\r\n\r\n    const getTopCryptoSymbols = async () => {\r\n        try {\r\n            const response = await axios.get('http://localhost:8080/https://api.coingecko.com/api/v3/coins/markets', {\r\n                params: {\r\n                    vs_currency: 'usd',\r\n                    per_page: 20,\r\n                    page: 1,\r\n                    order: 'market_cap_desc',\r\n                    sparkline: false\r\n                }\r\n            });\r\n            const symbols = response.data.map(crypto => crypto.symbol.toUpperCase());\r\n            setCryptoOptions(symbols);\r\n        } catch (error) {\r\n            console.error('Error fetching top crypto symbols:', error);\r\n        }\r\n    };    \r\n\r\n    const fetchCurrentPrice = async (symbol) => {\r\n    try {\r\n        const response = await axios.get(`https://api.coinbase.com/v2/prices/${symbol.toUpperCase()}-USD/spot`);\r\n        return response.data.data.amount;\r\n    } catch (error) {\r\n        console.error('Error fetching current price:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\n    \r\nconst fetchAlarmPrices = async () => {\r\n    try {\r\n        const promises = alarms.map(async (alarm) => {\r\n            const currentPricePromise = fetchCurrentPrice(alarm.CryptoSymbol.toLowerCase());\r\n            return currentPricePromise.then(currentPrice => {\r\n                console.log(`Alarm: ${alarm.CryptoSymbol}, Current price: ${currentPrice}`);\r\n                \r\n                if (currentPrice !== null) {\r\n                    setCurrentValues(prevValues => ({\r\n                        ...prevValues,\r\n                        [alarm.CryptoSymbol.toUpperCase()]: currentPrice\r\n                    }));\r\n                }\r\n                \r\n                return { ...alarm, currentPrice: currentPrice };\r\n            });\r\n        });\r\n\r\n        const updatedAlarms = await Promise.all(promises);\r\n        setAlarms(updatedAlarms);\r\n    } catch (error) {\r\n        console.error('Error fetching alarm prices:', error);\r\n    }\r\n};\r\n\r\n    \r\n\r\n    const handleAddAlarm = async () => {\r\n        try {\r\n            const alarmId = `${cryptoSymbol}-${Date.now()}`;\r\n            const newAlarm = {\r\n                userEmail: user.email,\r\n                alarmId: alarmId,\r\n                cryptoSymbol: cryptoSymbol.toUpperCase(),\r\n                targetPrice: alarmPrice,\r\n                aboveorbelow: alarmCondition,\r\n                isTriggered: false\r\n            };\r\n            await axios.post('http://localhost:5000/api/alarm', newAlarm);\r\n            getAllAlarms(user.email);\r\n        } catch (error) {\r\n            console.error('Error adding alarm:', error);\r\n        }\r\n    };\r\n\r\n    const getAllAlarms = async (userEmail) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/api/alarm?userEmail=${userEmail}`);\r\n            setAlarms(response.data);\r\n        } catch (error) {\r\n            console.error('Error fetching alarms:', error);\r\n        }\r\n    };\r\n\r\n    const fetchCurrentPriceForAllCryptos = async () => {\r\n        try {\r\n            if (cryptos.length === 0) {\r\n                console.log(\"Nema dostupnih kriptovaluta.\");\r\n                return;\r\n            }\r\n            \r\n            const symbols = cryptos.map(crypto => crypto.Symbol);\r\n            const prices = await Promise.all(symbols.map(async (symbol) => {\r\n                const currentPrice = await fetchCurrentPrice(symbol);\r\n                return { symbol, currentPrice };\r\n            }));\r\n            console.log(\"Trenutne cene za sve kriptovalute:\", prices);\r\n        } catch (error) {\r\n            console.error('Error fetching current prices for all cryptos:', error);\r\n        }\r\n    };\r\n\r\n    if (!user) {\r\n        return <p>Niste ulogovani.</p>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"alarm-container container\">\r\n            <Header />\r\n            <div className=\"form-container mt-4\">\r\n                <form className=\"alarm-form card p-4\">\r\n                    <h3>Postavite alarm za kriptovalutu:</h3>\r\n                    <div className=\"form-group\">\r\n                        <label>Symbol:</label>\r\n                        <select className=\"form-control\" value={cryptoSymbol} onChange={e => setCryptoSymbol(e.target.value.toUpperCase())}>\r\n                            <option value=\"\">Izaberite simbol</option>\r\n                            {cryptoOptions.map(symbol => (\r\n                                <option key={symbol} value={symbol.toUpperCase()}>{symbol.toUpperCase()}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                    {/*\r\n                    <div className=\"form-group\">\r\n                        <label>Ime:</label>\r\n                        <input className=\"form-control\" type=\"text\" value={cryptoName} readOnly />\r\n                    </div>\r\n                    */}\r\n                    <div className=\"form-group\">\r\n                        <label>Ciljana cena:</label>\r\n                        <input className=\"form-control\" type=\"number\" value={alarmPrice} onChange={e => setAlarmPrice(parseFloat(e.target.value))} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Uslov:</label>\r\n                        <select className=\"form-control\" value={alarmCondition} onChange={e => setAlarmCondition(e.target.value)}>\r\n                            <option value=\"above\">Iznad</option>\r\n                            <option value=\"below\">Ispod</option>\r\n                        </select>\r\n                    </div>\r\n                    <button className=\"btn btn-primary mt-3\" type=\"button\" onClick={handleAddAlarm}>Postavi alarm</button>\r\n                </form>\r\n            </div>\r\n            <div className=\"alarm-list mt-5\">\r\n                <h3>Aktivni alarmi:</h3>\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>CryptoSymbol</th>\r\n                            <th>Ciljana cena</th>\r\n                            <th>Trenutna cena</th>\r\n                            <th>Uslov</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {alarms.map((alarm, index) => (\r\n                            <tr key={index}>\r\n                                <td>{alarm.CryptoSymbol}</td>\r\n                                <td>{alarm.TargetPrice} USD</td>\r\n                                <td>{currentValues[alarm.CryptoSymbol.toUpperCase()] !== undefined ? currentValues[alarm.CryptoSymbol.toUpperCase()] : 'Loading...'}</td>\r\n                                <td>{alarm.IsAbove ? 'Iznad' : 'Ispod'}</td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AlarmPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}